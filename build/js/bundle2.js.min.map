{"version":3,"sources":["pagination.js"],"names":["window","paginate","_lignePaginate","init","el","options","numberPerPage","goBar","pageCounter","filter","setTableEl","initTable","getEl","checkIsTableNull","setOptions","setConstNumberPerPage","setFilterOptions","launchPaginate","settings","table","constNumberPerPage","numberOfPages","hasPagination","filterSettings","filterBox","trs","number","setNumberPerPage","indexOf","document","getElementById","replace","trim","querySelector","filterOptions","setFilterEl","checkIsFilterBoxNull","setFunctionInFilterBox","setAttribute","getTable","getNumberPerPage","getConstNumberPerPage","pageCount","th","tr","value","setPageCounter","Error","removePaginate","element","parentNode","removeChild","paginationMoreThatTenPage","iterator","numberOfPage","middleValue","goToPage","page","sort","paginateAlreadyExists","$i","$ii","rowCount","rows","length","hasHead","firstElementChild","tagName","$j","outerHTML","Math","ceil","insertAdjacentHTML","selectedPageNumber","startPoint","innerHTML","currentPage","nextDisabled","buttons","pageButtons","classList","add","style","display","visibility","toUpperCase","querySelectorAll","forEach","children","find","td","includes","lignePaginate"],"mappings":"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","file":"bundle2.js","sourcesContent":["/**\r\n * Ligne Paginatejs\r\n *\r\n * Autor: Albert Eduardo Hidalgo Taveras\r\n * Github: https://github.com/itsalb3rt\r\n *\r\n * El propÃ³sito de esta liberia es proporcionar una herramienta sin\r\n * dependencias de Frameworks o otras dependencias molestas.\r\n *\r\n * Con unas pocas configuraciones esto es capaz de arrancar y liberarlo de mucho trabajo.\r\n *\r\n * *\r\n * Ejemplo:\r\n * let options = {\r\n *       numberPerPage:5,\r\n *       goBar:false,\r\n *       pageCounter:false,\r\n * };\r\n *\r\n * let filterOptions = {\r\n *      el:'#searchBox'\r\n * };\r\n *\r\n * paginate.init('.myTable',options,filterOptions);\r\n **/\r\n\r\n (function(window){\r\n    'use strict';\r\n\r\n    // This function will contain all our code\r\n    function lignePaginate(){\r\n        var _lignePaginate = {};\r\n\r\n        /**\r\n         * Inicializa todas las configuracion y validaciones antes de ejecutar\r\n         * la paginacion y el filtro (en caso de ser asignado)\r\n         **/\r\n        _lignePaginate.init = function(el, options = {numberPerPage: 10,goBar:false,pageCounter:true},filter = [{el: null}]\r\n        ){\r\n            setTableEl(el);\r\n            initTable(_lignePaginate.getEl());\r\n            checkIsTableNull();\r\n            setOptions(options);\r\n            setConstNumberPerPage(options.numberPerPage);\r\n            setFilterOptions(filter);\r\n            launchPaginate();\r\n        }\r\n        /**\r\n         * Configuraciones de la paginacion\r\n         **/\r\n        var settings = {\r\n            el:null,\r\n            table:null,\r\n            numberPerPage:10,\r\n            constNumberPerPage:10,\r\n            numberOfPages:0,\r\n            goBar:false,\r\n            pageCounter:true,\r\n            hasPagination:true,\r\n        };\r\n\r\n        var filterSettings = {\r\n            el:null,\r\n            filterBox:null,\r\n            trs:null,\r\n        }\r\n\r\n        /**\r\n         * Setters private\r\n         **/\r\n\r\n        var setConstNumberPerPage = function(number){\r\n            settings.constNumberPerPage = number;\r\n        }\r\n        var setNumberPerPage = function(number){\r\n            settings.numberPerPage = number;\r\n        }\r\n\r\n        var initTable = function(el){\r\n            if(el.indexOf('#') > -1 ){\r\n                settings.table = document.getElementById(el.replace('#','').trim());\r\n            }else if(el.indexOf('.') > -1  ){\r\n                settings.table = document.querySelector(el);\r\n            }\r\n        }\r\n\r\n        var iniFilter = function(el){\r\n            if(el.indexOf('#') > -1 ){\r\n                filterSettings.filterBox = document.getElementById(el.replace('#','').trim());\r\n            }else if(el.indexOf('.') > -1  ){\r\n                filterSettings.filterBox = document.querySelector(el);\r\n            }\r\n        }\r\n\r\n        var setTableEl = function(el){\r\n            settings.el = el;\r\n        }\r\n\r\n        var setFilterOptions = function (filterOptions) {\r\n            if(filterOptions.el != null){\r\n                setFilterEl(filterOptions.el);\r\n                iniFilter(filterSettings.el);\r\n                checkIsFilterBoxNull();\r\n                setFunctionInFilterBox();\r\n            }\r\n        }\r\n\r\n        var setFilterEl = function(el){\r\n            filterSettings.el = el;\r\n        }\r\n\r\n        var setFunctionInFilterBox = function(){\r\n            filterSettings.filterBox.setAttribute('onkeyup','paginate.filter()')\r\n        }\r\n\r\n        var setGoBar = function(value){\r\n            settings.goBar = value;\r\n        }\r\n\r\n        var setPageCounter = function(value){\r\n            settings.pageCounter = value;\r\n        }\r\n\r\n        /**\r\n         * Getters public\r\n         **/\r\n\r\n\r\n        _lignePaginate.getEl = function(){\r\n            return settings.el;\r\n        }\r\n        _lignePaginate.getTable = function(){\r\n            return settings.table;\r\n        }\r\n        _lignePaginate.getNumberPerPage = function(){\r\n            return settings.numberPerPage;\r\n        }\r\n\r\n        _lignePaginate.getConstNumberPerPage = function(){\r\n            return settings.constNumberPerPage;\r\n        }\r\n\r\n        /**\r\n         * Private Methods\r\n         **/\r\n\r\n        var table,tr = [],pageCount,numberPerPage,th;\r\n\r\n        var setOptions = function(options){\r\n            if(options.numberPerPage != settings.numberPerPage){\r\n                setNumberPerPage(options.numberPerPage);\r\n            }\r\n\r\n            if(typeof options.goBar === 'boolean')\r\n                setGoBar(options.goBar);\r\n\r\n            if(typeof options.pageCounter === 'boolean')\r\n                setPageCounter(options.pageCounter);\r\n        }\r\n\r\n        var checkIsTableNull = function(){\r\n            if(settings.table == null){\r\n                throw new Error('Element ' + _lignePaginate.getEl() + ' no exits');\r\n            }\r\n        }\r\n\r\n        var checkIsFilterBoxNull = function(){\r\n            if(filterSettings.filterBox == null){\r\n                throw new Error('Element ' + _lignePaginate.getEl() + ' no exits');\r\n            }\r\n        }\r\n\r\n        var paginateAlreadyExists = function() {\r\n            let paginate = document.querySelector('div.paginate');\r\n            if(paginate != null)\r\n                removePaginate(paginate);\r\n        }\r\n\r\n        var removePaginate = function(element){\r\n            element.parentNode.removeChild(element);\r\n        }\r\n\r\n        var hiddenPaginateControls = function(){\r\n            document.querySelector('.paginate_controls').style.visibility = 'hidden';\r\n        }\r\n\r\n        var showPaginatecontrols = function(){\r\n            document.querySelector('.paginate_controls').style.visibility = 'unset';\r\n        }\r\n\r\n        // (numberOfPage): nÃºmero de pÃ¡ginas, (currentPage): pÃ¡gina actual, la pÃ¡gina seleccionada ..\r\n        var pageButtons = function(numberOfPage,currentPage) {\r\n            /** Estas variables deshabilitarÃ¡n el botÃ³n \"Prev\" en la\r\n             * primera pÃ¡gina y el botÃ³n \"siguiente\" en la ultima\r\n             **/\r\n            let\tprevDisabled = (currentPage == 1)?\"disabled\":\"\";\r\n            let nextDisabled = (currentPage == numberOfPage)?\"disabled\":\"\";\r\n\r\n            /** Este (botones) creara todos los botones necesarios\r\n             * crearÃ¡ cada botÃ³n y establece el atributo onclick\r\n             * a la funciÃ³n \"order\" con un nÃºmero especial (currentPage)\r\n             *\r\n             * Tambien se encarga de agregar el boton de \"gotopage\" y \"pagecounter\"\r\n             **/\r\n            let buttons = \"<input type='button' value='â' class='paginate_control_prev' onclick='paginate.sort(\"+(currentPage - 1)+\")' \"+prevDisabled+\">\";\r\n            let buttonNumberOfPage = \"<input type='button' value='\" + currentPage + ' - ' + numberOfPage + \"' disabled>\";\r\n\r\n            for (let $i=1; $i<=numberOfPage;$i++){\r\n                if(numberOfPage > 10){\r\n                    buttons += paginationMoreThatTenPage($i,numberOfPage);\r\n                }else{\r\n                    buttons += \"<input type='button' id='id\"+$i+\"'value='\"+$i+\"' onclick='paginate.sort(\"+$i+\")'>\";\r\n                }\r\n            }\r\n\r\n            let nextButton = \"<input type='button' value='â' class='paginate_control_next' onclick='paginate.sort(\"+(currentPage + 1)+\")' \"+nextDisabled+\">\";\r\n            buttons +=  nextButton;\r\n\r\n            // if(settings.pageCounter)\r\n            //     buttons += buttonNumberOfPage;\r\n\r\n            // if(settings.goBar)\r\n            //     buttons += addGoToPage();\r\n\r\n            return buttons;\r\n        }\r\n        /**\r\n         * Cuando el numero de paginas supera las 10 se crea un mecanismo que oculta\r\n         * todas las paginas con numero superior a 4 y inferior a las ultima pagina\r\n         *\r\n         * Cuando se navega por la paginaciÃ³n solo se mostrara el numero actual\r\n         * Inicial\r\n         *      <- prev  (1)    2   3   4   ... 41 next ->\r\n         * DespuÃ©s\r\n         *      <- prev  1    2   3   4  (22)   ... 41 next ->\r\n         **/\r\n        var paginationMoreThatTenPage = function(iterator,numberOfPage){\r\n\r\n            let referenceForTheLast = numberOfPage - 1;\r\n            let middleValue = '...';\r\n\r\n            if(iterator > referenceForTheLast || iterator < 5){\r\n                return \"<input type='button' id='id\"+iterator+\"'value='\"+iterator+\"' onclick='paginate.sort(\"+iterator+\")'>\";\r\n            }else if((iterator + 1) == numberOfPage) {\r\n                return middleValue + \"<input type='button' id='id\"+iterator+\"'value='\"+iterator+\"' style='display: none' onclick='paginate.sort(\"+iterator+\")'>\";\r\n            }else {\r\n                return \"<input type='button' id='id\"+iterator+\"'value='\"+iterator+\"' style='display: none' onclick='paginate.sort(\"+iterator+\")'>\";\r\n            }\r\n        }\r\n\r\n        var addGoToPage = function(){\r\n            let inputBox = \"<input type='number' id='paginate_page_to_go' value='1' min='1' max='\"+ settings.numberOfPages +\"'>\";\r\n            let goButton = \"<input type='button' id='paginate-go-button' value='Go' onclick='paginate.goToPage()'>  \";\r\n            return inputBox + goButton;\r\n        }\r\n\r\n        /**\r\n         * Public Methods\r\n         **/\r\n\r\n        _lignePaginate.goToPage = function(){\r\n            let page = document.getElementById(\"paginate_page_to_go\").value;\r\n            _lignePaginate.sort(page);\r\n        }\r\n\r\n        var launchPaginate = function(){\r\n            paginateAlreadyExists();\r\n            table = settings.table;\r\n            numberPerPage = settings.numberPerPage;\r\n            let rowCount = table.rows.length;\r\n            // obtener el nombre de la etiqueta de la primera celda (en la primera fila)\r\n            let firstRow = table.rows[0].firstElementChild.tagName;\r\n            // Verificando si la tabla tiene encaebzado\r\n            let hasHead = (firstRow === \"TH\");\r\n            // contadores de bucles, para comenzar a contar desde las filas [1] (2da fila) si la primera fila tiene una etiqueta de encabezado\r\n            let $i,$ii,$j = (hasHead)?1:0;\r\n            // contiene la primera fila si tiene un (<th>) y nada si (<td>)\r\n            th = (hasHead?table.rows[(0)].outerHTML:\"\");\r\n            pageCount = Math.ceil(rowCount / numberPerPage);\r\n            settings.numberOfPages = pageCount;\r\n\r\n            if (pageCount > 1) {\r\n                settings.hasPagination = true;\r\n                for ($i = $j,$ii = 0; $i < rowCount; $i++, $ii++)\r\n                    tr[$ii] = table.rows[$i].outerHTML;\r\n                // Contenedor de los botones \"paginate_controls\"\r\n                table.insertAdjacentHTML(\"afterend\",\"<div id='buttons' class='paginate paginate_controls'></div\");\r\n                // Inicializando la tabla en la pagina 1\r\n                _lignePaginate.sort(1);\r\n            }else{\r\n                settings.hasPagination = false;\r\n            }\r\n        };\r\n\r\n        _lignePaginate.sort = function(selectedPageNumber) {\r\n            /** crea (filas) una variable para contener el grupo de filas\r\n             * para ser mostrado en la pÃ¡gina seleccionada,\r\n             * startPoint: la primera fila en cada pÃ¡gina, Do The Math\r\n             **/\r\n            let rows = th,startPoint = ((settings.numberPerPage * selectedPageNumber)-settings.numberPerPage);\r\n            for (let $i = startPoint; $i < (startPoint+settings.numberPerPage) && $i < tr.length; $i++)\r\n                rows += tr[$i];\r\n\r\n            table.innerHTML = rows;\r\n            document.getElementById(\"buttons\").innerHTML = pageButtons(pageCount,selectedPageNumber);\r\n            document.getElementById(\"id\"+selectedPageNumber).classList.add('active');\r\n            /**\r\n             * Esto se utiliza para mostrar el numero de la pagina en la que se encuentra\r\n             * generalmente se usa cuando las paginas son mayor a 10\r\n             **/\r\n            document.getElementById(\"id\"+selectedPageNumber).style.display = 'unset';\r\n        }\r\n\r\n        /**\r\n         * Esto se encarga de filtrar la informacion segun una caja de texto\r\n         * tambien llama al metodo que oculta la parte de los botones de la\r\n         * paginacion\r\n         **/\r\n        _lignePaginate.filter = function() {\r\n            if(settings.hasPagination){\r\n                setNumberPerPage(9999);\r\n                _lignePaginate.sort(1);\r\n                hiddenPaginateControls();\r\n            }\r\n            const filter = document.querySelector(filterSettings.el).value.toUpperCase();\r\n            const trs = document.querySelectorAll( settings.el + ' tr:not(.header)');\r\n            trs.forEach(tr => tr.style.display = [...tr.children].find(td => td.innerHTML.toUpperCase().includes(filter)) ? '' : 'none');\r\n\r\n            if(filter.length == 0 && settings.hasPagination){\r\n                setNumberPerPage(_lignePaginate.getConstNumberPerPage());\r\n                _lignePaginate.sort(1);\r\n                showPaginatecontrols();\r\n            }\r\n\r\n        }\r\n\r\n        return _lignePaginate;\r\n    }\r\n\r\n    if(typeof(window.paginate) === 'undefined'){\r\n        window.paginate = lignePaginate();\r\n    }\r\n})(window);"]}